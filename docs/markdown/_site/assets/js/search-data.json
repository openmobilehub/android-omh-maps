<!DOCTYPE html> <html lang="en-US"> <head> <meta charset="UTF-8"> <meta http-equiv="X-UA-Compatible" content="IE=Edge"> <link rel="stylesheet" href="/advanced-docs/assets/css/just-the-docs-default.css"> <link rel="stylesheet" href="/advanced-docs/assets/css/just-the-docs-head-nav.css" id="jtd-head-nav-stylesheet"> <style id="jtd-nav-activation"> .site-nav ul li a { background-image: none; } .site-nav > ul.nav-category-list > li > button svg { transform: rotate(-90deg); } .site-nav > ul.nav-category-list > li.nav-list-item > ul.nav-list { display: block; } </style> <script src="/advanced-docs/assets/js/vendor/lunr.min.js"></script> <script src="/advanced-docs/assets/js/just-the-docs.js"></script> <meta name="viewport" content="width=device-width, initial-scale=1"> <!-- Begin Jekyll SEO tag v2.8.0 --> <title>OMH Maps advanced docs | Advanced usage documentation for the OMH Maps library.</title> <meta name="generator" content="Jekyll v4.3.3" /> <meta property="og:title" content="OMH Maps advanced docs" /> <meta property="og:locale" content="en_US" /> <meta name="description" content="Advanced usage documentation for the OMH Maps library." /> <meta property="og:description" content="Advanced usage documentation for the OMH Maps library." /> <link rel="canonical" href="http://localhost:4000/advanced-docs/assets/js/search-data.json" /> <meta property="og:url" content="http://localhost:4000/advanced-docs/assets/js/search-data.json" /> <meta property="og:site_name" content="OMH Maps advanced docs" /> <meta property="og:type" content="website" /> <meta name="twitter:card" content="summary" /> <meta property="twitter:title" content="OMH Maps advanced docs" /> <script type="application/ld+json"> {"@context":"https://schema.org","@type":"WebPage","description":"Advanced usage documentation for the OMH Maps library.","headline":"OMH Maps advanced docs","url":"http://localhost:4000/advanced-docs/assets/js/search-data.json"}</script> <!-- End Jekyll SEO tag --> </head> <body> <a class="skip-to-main" href="#main-content">Skip to main content</a> <svg xmlns="http://www.w3.org/2000/svg" class="d-none"> <symbol id="svg-link" viewBox="0 0 24 24"> <title>Link</title> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-link"> <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path> </svg> </symbol> <symbol id="svg-menu" viewBox="0 0 24 24"> <title>Menu</title> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-menu"> <line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line> </svg> </symbol> <symbol id="svg-arrow-right" viewBox="0 0 24 24"> <title>Expand</title> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-right"> <polyline points="9 18 15 12 9 6"></polyline> </svg> </symbol> <!-- Feather. MIT License: https://github.com/feathericons/feather/blob/master/LICENSE --> <symbol id="svg-external-link" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-external-link"> <title id="svg-external-link-title">(external link)</title> <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path><polyline points="15 3 21 3 21 9"></polyline><line x1="10" y1="14" x2="21" y2="3"></line> </symbol> <symbol id="svg-doc" viewBox="0 0 24 24"> <title>Document</title> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"> <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline> </svg> </symbol> <symbol id="svg-search" viewBox="0 0 24 24"> <title>Search</title> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search"> <circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line> </svg> </symbol> <!-- Bootstrap Icons. MIT License: https://github.com/twbs/icons/blob/main/LICENSE.md --> <symbol id="svg-copy" viewBox="0 0 16 16"> <title>Copy</title> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard" viewBox="0 0 16 16"> <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/> <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/> </svg> </symbol> <symbol id="svg-copied" viewBox="0 0 16 16"> <title>Copied</title> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard-check-fill" viewBox="0 0 16 16"> <path d="M6.5 0A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3Zm3 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3Z"/> <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1A2.5 2.5 0 0 1 9.5 5h-3A2.5 2.5 0 0 1 4 2.5v-1Zm6.854 7.354-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 0 1 .708-.708L7.5 10.793l2.646-2.647a.5.5 0 0 1 .708.708Z"/> </svg> </symbol> </svg> <div class="side-bar"> <div class="site-header" role="banner"> <a href="/advanced-docs/" class="site-title lh-tight"> OMH Maps advanced docs </a> <button id="menu-button" class="site-button btn-reset" aria-label="Toggle menu" aria-pressed="false"> <svg viewBox="0 0 24 24" class="icon" aria-hidden="true"><use xlink:href="#svg-menu"></use></svg> </button> </div> <nav aria-label="Main" id="site-nav" class="site-nav"> <ul class="nav-list"><li class="nav-list-item"><a href="/advanced-docs/" class="nav-list-link">Home</a></li></ul> <ul class="nav-list nav-category-list"> <li class="nav-list-item"><button class="nav-list-expander btn-reset" aria-label="Toggle collection Core" aria-pressed="false"> <svg viewBox="0 0 24 24" aria-hidden="true"><use xlink:href="#svg-arrow-right"></use></svg> </button><div class="nav-category">Core</div> <ul class="nav-list"><li class="nav-list-item"><a href="/advanced-docs/core/README/" class="nav-list-link">Core module</a></li><li class="nav-list-item"><button class="nav-list-expander btn-reset" aria-label="toggle items in Advanced features category" aria-pressed="false"> <svg viewBox="0 0 24 24" aria-hidden="true"><use xlink:href="#svg-arrow-right"></use></svg> </button><a href="/advanced-docs/core/advanced/README/" class="nav-list-link">Advanced features</a><ul class="nav-list"></ul></li><li class="nav-list-item"><a href="/advanced-docs/core/plugins/PLUGINS/" class="nav-list-link">Plugins</a></li><li class="nav-list-item"><a href="/advanced-docs/core/SETUP_WITH_OMH_CORE_PLUGIN/" class="nav-list-link">Setup with omh-core plugin</a></li><li class="nav-list-item"><a href="/advanced-docs/core/SETUP_WITHOUT_OMH_CORE_PLUGIN/" class="nav-list-link">Setup without omh-core plugin</a></li></ul> </li> </ul> <ul class="nav-list nav-category-list"> <li class="nav-list-item"><button class="nav-list-expander btn-reset" aria-label="Toggle collection Plugin GoogleMaps" aria-pressed="false"> <svg viewBox="0 0 24 24" aria-hidden="true"><use xlink:href="#svg-arrow-right"></use></svg> </button><div class="nav-category">Plugin GoogleMaps</div> <ul class="nav-list"><li class="nav-list-item"><button class="nav-list-expander btn-reset" aria-label="toggle items in Advanced features category" aria-pressed="false"> <svg viewBox="0 0 24 24" aria-hidden="true"><use xlink:href="#svg-arrow-right"></use></svg> </button><a href="/advanced-docs/plugin-googlemaps/advanced/README/" class="nav-list-link">Advanced features</a><ul class="nav-list"></ul></li></ul> </li> </ul> <ul class="nav-list nav-category-list"> <li class="nav-list-item"><button class="nav-list-expander btn-reset" aria-label="Toggle collection Plugin OSM" aria-pressed="false"> <svg viewBox="0 0 24 24" aria-hidden="true"><use xlink:href="#svg-arrow-right"></use></svg> </button><div class="nav-category">Plugin OSM</div> <ul class="nav-list"><li class="nav-list-item"><button class="nav-list-expander btn-reset" aria-label="toggle items in Advanced features category" aria-pressed="false"> <svg viewBox="0 0 24 24" aria-hidden="true"><use xlink:href="#svg-arrow-right"></use></svg> </button><a href="/advanced-docs/plugin-openstreetmap/advanced/README/" class="nav-list-link">Advanced features</a><ul class="nav-list"></ul></li></ul> </li> </ul> </nav> <footer class="site-footer"> This site uses <a href="https://github.com/just-the-docs/just-the-docs">Just the Docs</a>, a documentation theme for Jekyll. </footer> </div> <div class="main" id="top"> <div id="main-header" class="main-header"> <div class="search" role="search"> <div class="search-input-wrap"> <input type="text" id="search-input" class="search-input" tabindex="0" placeholder="Search OMH Maps advanced docs" aria-label="Search OMH Maps advanced docs" autocomplete="off"> <label for="search-input" class="search-label"><svg viewBox="0 0 24 24" class="search-icon"><use xlink:href="#svg-search"></use></svg></label> </div> <div id="search-results" class="search-results"></div> </div> </div> <div class="main-content-wrap"> <div id="main-content" class="main-content"> <main> <h{"0": { "doc": "Home", "title": "OMH Maps", "content": " ", "url": "/advanced-docs/#omh-maps", "relUrl": "/#omh-maps" },"1": { "doc": "Home", "title": "Introduction", "content": "This is the advanced usage documentation for Open Mobile Hub Maps. Browse the topics from the navigation sidebar to the left. ", "url": "/advanced-docs/#introduction", "relUrl": "/#introduction" },"2": { "doc": "Home", "title": "Module index", "content": "Core . | Core module | Setup without omh-core plugin | Setup with omh-core plugin | Camera Features | Plugins OMH Map | Display your current location | Gestures | OMH Location | Map Markers | My Location Layer | Polygons | Polylines | Advanced features | Utilities | Plugins | . Plugin-googlemaps . | Advanced features | . Plugin-openstreetmap . | Advanced features | . You can find the source code for OMH Maps at GitHub: android-omh-maps and the corresponding API docs here . Open Mobile Hub home page . ", "url": "/advanced-docs/#module-index", "relUrl": "/#module-index" },"3": { "doc": "Home", "title": "Home", "content": " ", "url": "/advanced-docs/", "relUrl": "/" },"4": { "doc": "Core module", "title": "Module core", "content": " ", "url": "/advanced-docs/core/README/#module-core", "relUrl": "/core/README/#module-core" },"5": { "doc": "Core module", "title": "Overview", "content": "The Core package is the backbone of the map feature, mainly providing common interfaces that the plugins use. This setup ensures smooth and predictable interactions between the plugins and the rest of the application. Besides these interfaces, the Core package also offers mechanisms for setting up and handling maps. Additionally, it includes utilities for checking network connectivity and for logging activities. ", "url": "/advanced-docs/core/README/#overview", "relUrl": "/core/README/#overview" },"6": { "doc": "Core module", "title": "Documentation", "content": ". | API Reference Docs | Advanced documentation | . ", "url": "/advanced-docs/core/README/#documentation", "relUrl": "/core/README/#documentation" },"7": { "doc": "Core module", "title": "Contributing", "content": "Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though. ", "url": "/advanced-docs/core/README/#contributing", "relUrl": "/core/README/#contributing" },"8": { "doc": "Core module", "title": "License", "content": "Copyright 2023 Open Mobile Hub Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ", "url": "/advanced-docs/core/README/#license", "relUrl": "/core/README/#license" },"9": { "doc": "Core module", "title": "Core module", "content": " ", "url": "/advanced-docs/core/README/", "relUrl": "/core/README/" },"10": { "doc": "Setup without omh-core plugin", "title": "Gradle Setup without Omh Core Plugin", "content": "To incorporate Omh Maps into your project, you have two options: utilize the Omh Core Plugin or directly include the Omh Client libraries dependencies. The subsequent instructions will outline the necessary steps for directly including the Omh Client libraries as a Gradle dependency. TODO: Add the instructions with https://callstackio.atlassian.net/browse/OmhD-104 . ", "url": "/advanced-docs/core/SETUP_WITHOUT_OMH_CORE_PLUGIN/#gradle-setup-without-omh-core-plugin", "relUrl": "/core/SETUP_WITHOUT_OMH_CORE_PLUGIN/#gradle-setup-without-omh-core-plugin" },"11": { "doc": "Setup without omh-core plugin", "title": "Setup without omh-core plugin", "content": " ", "url": "/advanced-docs/core/SETUP_WITHOUT_OMH_CORE_PLUGIN/", "relUrl": "/core/SETUP_WITHOUT_OMH_CORE_PLUGIN/" },"12": { "doc": "Setup with omh-core plugin", "title": "Gradle Setup with Omh Core Plugin", "content": "To incorporate Omh Maps into your project, you have two options: utilize the Omh Core Plugin or directly include the Omh Client libraries dependencies. The subsequent instructions will outline the necessary steps for including the Omh Core Plugin as a Gradle dependency. | In your app’s module-level build.gradleunder the plugins element add the plugin id. plugins { ... id(\"com.openmobilehub.android.omh-core\") } . | Save the file and sync Project with Gradle Files. | . ", "url": "/advanced-docs/core/SETUP_WITH_OMH_CORE_PLUGIN/#gradle-setup-with-omh-core-plugin", "relUrl": "/core/SETUP_WITH_OMH_CORE_PLUGIN/#gradle-setup-with-omh-core-plugin" },"13": { "doc": "Setup with omh-core plugin", "title": "Configure the Omh Core plugin", "content": "In this sample app, we utilize the OmhConfig definition to expand the capabilities of the existing Android Studio variants. For more details, refer to the Omh Core Plugin Docs. Basic configuration . | In your app’s module-level build.gradle file add the following code at the end of the file. | ... dependencies { ... } OmhConfig { bundle(\"singleBuild\") { maps { gmsService { dependency = \"com.openmobilehub.android.maps:plugin-googlemaps:1.0\" } nonGmsService { dependency = \"com.openmobilehub.android.maps:plugin-openstreetmap:1.0\" } } } bundle(\"gms\") { maps { gmsService { dependency = \"com.openmobilehub.android.maps:plugin-googlemaps:1.0\" } } } bundle(\"nonGms\") { maps { nonGmsService { dependency = \"com.openmobilehub.android.maps:plugin-openstreetmap:1.0\" } } } } . In this step, you defined the Omh Core Plugin bundles to generate multiple build variants with specific suffixes as their names. For example, if your project has release and debug variants with singleBuild, gms, and nonGms Omh bundles, the following build variants will be generated: . | releaseSingleBuild, releaseGms, and releaseNonGms | debugSingleBuild, debugGms, and debugNonGms | . Variant singleBuild . | Define the Service. In this example is maps. | Define the ServiceDetails. In this example are gmsService and nonGmsService. | Define the dependency and the path. In this example are com.openmobilehub.android.maps:plugin-googlemaps:1.0\" and com.openmobilehub.android.maps:plugin-openstreetmap:1.0. Note: It’s important to observe how a single build encompasses both GMS and Non-GMS configurations. | . Variant gms . | Define the Service. In this example is maps. | Define the ServiceDetails . In this example is gmsService. | Define the dependency and the path. In this example is com.openmobilehub.android.maps:plugin-googlemaps:1.0\". Note: gms build covers only GMS (Google Mobile Services). | . Variant nonGms . | Define the Service. In this example is maps. | Define the ServiceDetails . In this example is nonGmsService. | Define the dependency and the path. In this example is com.openmobilehub.android.maps:plugin-openstreetmap:1.0. Note: nonGms build covers only Non-GMS configurations. | . | Save and sync Project with Gradle Files. | Now you can select a build variant. To change the build variant Android Studio uses, do one of the following: . | Select Build &gt; Select Build Variant... in the menu. | Select View &gt; Tool Windows &gt; Build Variants in the menu. | Click the Build Variants tab on the tool window bar. | . | You can select any of the 3 variants for the :apps:maps-sample: . | singleBuild variant builds for GMS (Google Mobile Services) and Non-GMS devices without changes to the code.(Recommended) | gms variant builds for devices that has GMS (Google Mobile Services). | nonGms variant builds for devices that doesn’t have GMS (Google Mobile Services). | . Note: In the rest of this guide, we will use the debugSingleBuild variant to demonstrate the same build running on GMS and Non-GMS devices. | Open the app’s module-level MainApplication class and add the required imports below the package name. The file is in the same level as the MainActivity: . import com.openmobilehub.android.maps.core.factories.OmhMapProvider . Then initialize the OmhMapProvider as follows: . class MainApplication : Application() { override fun onCreate() { super.onCreate() OmhMapProvider.Initiator() .addGmsPath(BuildConfig.MAPS_GMS_PATH) .addNonGmsPath(BuildConfig.MAPS_NON_GMS_PATH) .initialize() } } . Important: If you encounter the error “Missing BuildConfig.MAPS_GMS_PATH and BuildConfig.MAPS_NON_GMS_PATH in BuildConfig class”. Follow the next steps: . | Sync Project with Gradle Files. | Select Build from the menu at the top in Android Studio. | Click on Clean Project and await. | Click on Rebuild Project and await. | . | . ", "url": "/advanced-docs/core/SETUP_WITH_OMH_CORE_PLUGIN/#configure-the-omh-core-plugin", "relUrl": "/core/SETUP_WITH_OMH_CORE_PLUGIN/#configure-the-omh-core-plugin" },"14": { "doc": "Setup with omh-core plugin", "title": "Setup with omh-core plugin", "content": " ", "url": "/advanced-docs/core/SETUP_WITH_OMH_CORE_PLUGIN/", "relUrl": "/core/SETUP_WITH_OMH_CORE_PLUGIN/" },"15": { "doc": "Camera Features", "title": "Camera Features", "content": "The maps API allows you to change which part of the world is visible on the map. This is achieved by changing the position of the camera. ", "url": "/advanced-docs/core/advanced/CAMERA/", "relUrl": "/core/advanced/CAMERA/" },"16": { "doc": "Camera Features", "title": "Updating the camera view", "content": "You can move the camera instantly. To move the camera instantly you can call OmhMap.moveCamera(OmhCoordinate, Float). val sydneyLocation = OmhCoordinate(-34.0, 151.0) val zoomLevel = 15f omhMap.moveCamera(sydneyLocation, zoomLevel) . ", "url": "/advanced-docs/core/advanced/CAMERA/#updating-the-camera-view", "relUrl": "/core/advanced/CAMERA/#updating-the-camera-view" },"17": { "doc": "Camera Features", "title": "Listening when the camera motion starts and movement has ended", "content": "There is a method setOnCameraMoveStartedListener(OmhOnCameraMoveStartedListener) that sets a callback that’s invoked when the camera starts moving. There is another method setOnCameraIdleListener(OmhOnCameraIdleListener) that sets a callback that’s invoked when the camera movement has ended. ", "url": "/advanced-docs/core/advanced/CAMERA/#listening-when-the-camera-motion-starts-and-movement-has-ended", "relUrl": "/core/advanced/CAMERA/#listening-when-the-camera-motion-starts-and-movement-has-ended" },"18": { "doc": "Camera Features", "title": "Camera move started listener", "content": "The OmhOnCameraMoveStartedListener is a callback interface for when the camera motion starts and the method called is onCameraMoveStarted(Int). Do not update or animate the camera from within this method. This is called on the Android UI thread. val omhOnCameraMoveStartedListener = OmhOnCameraMoveStartedListener { // The camera motion starts // For example display a Toast Toast.makeText(requireContext(), \"Camera started moving\", Toast.LENGTH_SHORT).show() } . Now the OmhOnCameraMoveListenerStartedListener can be set to the OmhMap. omhMap.setOnCameraMoveStartedListener(omhOnCameraMoveStartedListener) . ", "url": "/advanced-docs/core/advanced/CAMERA/#camera-move-started-listener", "relUrl": "/core/advanced/CAMERA/#camera-move-started-listener" },"19": { "doc": "Camera Features", "title": "Camera idle listener", "content": "The OmhOnCameraIdleListener is a callback interface for when camera movement has ended and the method called is onCameraIdle(). This is called on the Android UI thread. val omhOnCameraIdleListener = OmhOnCameraIdleListener { // The camera movement has ended // For example display a Toast Toast.makeText(requireContext(), \"Camera ended moving\", Toast.LENGTH_SHORT).show() } . Now the OmhOnCameraIdleListener can be set in the OmhMap. omhMap.setOnCameraIdleListener(omhOnCameraIdleListener) . ", "url": "/advanced-docs/core/advanced/CAMERA/#camera-idle-listener", "relUrl": "/core/advanced/CAMERA/#camera-idle-listener" },"20": { "doc": "Camera Features", "title": "Get camera position", "content": "To get he camera’s position fun getCameraPositionCoordinate(): OmhCoordinate. val cameraPosition: OmhCoordinate = omhMap.getCameraPositionCoordinate() . ", "url": "/advanced-docs/core/advanced/CAMERA/#get-camera-position", "relUrl": "/core/advanced/CAMERA/#get-camera-position" },"21": { "doc": "Plugins OMH Map", "title": "Customize OMH Map", "content": "This is the main class of the OMH Maps SDK for Android and is the entry point for all methods related to the map. You cannot instantiate a OmhMap object directly, rather, you must obtain one from the getMapAsync() method on a OmhMapFragment or OmhMapView that you have added to your application. Note: Similar to a View object, an OmhMap can only be read and modified from the Android UI thread. Calling OmhMap methods from another thread will result in an exception. Any object obtained from the OmhMap is associated with the view. It’s important to not hold on to objects (e.g. OmhMarker) beyond the view’s life. Otherwise it will cause a memory leak as the view cannot be released. ", "url": "/advanced-docs/core/advanced/CUSTOMIZE_OMH_MAP/#customize-omh-map", "relUrl": "/core/advanced/CUSTOMIZE_OMH_MAP/#customize-omh-map" },"22": { "doc": "Plugins OMH Map", "title": "Map View", "content": "alternatively to the OmhMapFragment you can use the OmhMapView which is a View that shows a map. Users of this class must forward all the life cycle methods from the Activity or Fragment containing this view to the corresponding ones in this class. In particular, you must forward on the following methods: . | onCreate(Bundle) | onStart() | onResume() | onPause() | onStop() | onDestroy() | onSaveInstanceState(Bundle) | onLowMemory() | . The snippet below shows how to use the OmhMapView. OmhMapView displays a map getting a View using getView(): View? . val view = OmhMapView.getView() . An OmhMap must be acquired using getMapAsync(OnOmhMapCallback). The OmhMapView automatically initializes the maps system and the view. OmhMapView.getMapAsync { OmhMap -&gt; // OmhMap object ready to use. } . Note: Advised not to add children to this view. You can use the map’s camera to set parameters as location and zoom level. For more information, see Camera . override fun onMapReady(OmhMap: OmhMap) { // OmhMap object is ready to use. // Example of usage. OmhMap.setZoomGesturesEnabled(true) OmhMap.setMyLocationEnabled(true) } . ", "url": "/advanced-docs/core/advanced/CUSTOMIZE_OMH_MAP/#map-view", "relUrl": "/core/advanced/CUSTOMIZE_OMH_MAP/#map-view" },"23": { "doc": "Plugins OMH Map", "title": "Map", "content": "OmhMap is the main class of the OMH Maps SDK for Android and is the entry point for all methods related to the map. You cannot instantiate a OmhMap object directly, rather, you must obtain one from the getMapAsync() method on a OmhMapFragment or OmhMapView that you have added to your application. Note: Similar to a View object, an OmhMap can only be read and modified from the Android UI thread. Calling OmhMap methods from another thread will result in an exception. OmhMap offers multiple funcionalities. Example, you can use the map’s camera to set parameters as location and zoom level. For more information, see Documentation . override fun onMapReady(OmhMap: OmhMap) { // OmhMap object is ready to use. // Example of usage. OmhMap.setZoomGesturesEnabled(true) OmhMap.setMyLocationEnabled(true) } . ", "url": "/advanced-docs/core/advanced/CUSTOMIZE_OMH_MAP/#map", "relUrl": "/core/advanced/CUSTOMIZE_OMH_MAP/#map" },"24": { "doc": "Plugins OMH Map", "title": "Plugins OMH Map", "content": " ", "url": "/advanced-docs/core/advanced/CUSTOMIZE_OMH_MAP/", "relUrl": "/core/advanced/CUSTOMIZE_OMH_MAP/" },"25": { "doc": "Display your current location", "title": "Display your current location", "content": "An OmhMap must be acquired using getMapAsync(OmhOnMapReadyCallback). This class automatically initializes the maps system and the view. | Implement the OmhOnMapReadyCallback interface and override the onMapReady() method, to set up the map when the OmhMap object is available: . import android.Manifest.permission.ACCESS_COARSE_LOCATION import android.Manifest.permission.ACCESS_FINE_LOCATION import android.content.pm.PackageManager import android.os.Bundle import android.util.Log import androidx.fragment.app.Fragment import android.view.LayoutInflater import android.view.View import android.view.ViewGroup import androidx.activity.result.contract.ActivityResultContracts import androidx.core.content.ContextCompat import com.openmobilehub.android.maps.core.factories.OmhMapProvider import com.openmobilehub.android.maps.core.presentation.fragments.OmhMapFragment import com.openmobilehub.android.maps.core.presentation.interfaces.location.OmhFailureListener import com.openmobilehub.android.maps.core.presentation.interfaces.location.OmhSuccessListener import com.openmobilehub.android.maps.core.presentation.interfaces.maps.OmhMap import com.openmobilehub.android.maps.core.presentation.interfaces.maps.OmhOnMapReadyCallback import com.openmobilehub.android.maps.core.presentation.models.OmhMarkerOptions import com.openmobilehub.android.maps.starter_sample.databinding.FragmentMapBinding class MapFragment : Fragment(), OmhOnMapReadyCallback { // ... override fun onMapReady(omhMap: OmhMap) { if (!hasPermissions()) { Log.e(\"permission error\", \"Not required permissions to get current location\") return } val onSuccessListener = OmhSuccessListener { omhCoordinate -&gt; omhMap.moveCamera(omhCoordinate, 15f) val omhMarkerOptions = OmhMarkerOptions().apply { title = \"My Current Location\" position = omhCoordinate } omhMap.addMarker(omhMarkerOptions) } val onFailureListener = OmhFailureListener { exception -&gt; Log.e(\"location error\", exception.localizedMessage, exception) } // Safe use of 'noinspection MissingPermission' since it is checking permissions in the if condition // noinspection MissingPermission OmhMapProvider.getInstance().provideOmhLocation(requireContext()).getCurrentLocation(onSuccessListener, onFailureListener) } private fun hasPermissions() = arrayOf(ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATION).all { ContextCompat.checkSelfPermission(requireContext(), it) == PackageManager.PERMISSION_GRANTED } } . | In your fragment’s onViewCreated(view: View, savedInstanceState: Bundle?) method, get the OmhMapFragment by calling FragmentManager.findFragmentById(). Then use getMapAsync() to register for the map callback: . override fun onViewCreated(view: View, savedInstanceState: Bundle?) { super.onViewCreated(view, savedInstanceState) // Request permissions, this can be done in another way, see https://developer.android.com/training/permissions/requesting registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) { // Obtain the OmhMapFragment and get notified when the map is ready to be used. val omhMapFragment = childFragmentManager.findFragmentById(R.id.fragment_map_container) as? OmhMapFragment omhMapFragment?.getMapAsync(this) }.launch(arrayOf(ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATION)) } . | Click Run for the app module menu option (or the play button icon) to run your app and see the map with the device’s location. Important: For a better experience and accuracy try a phone with a SIM card. | Explore Advanced Features . Complete the guide and access advanced mapping features: camera events, markers, location management, gestures, network utilities, and custom implementations/plugins. Visit Advanced Features for details, examples, and guides. Enhance your mapping experiences. Explore now! . | . ", "url": "/advanced-docs/core/advanced/DISPLAY_YOUR_CURRENT_LOCATION/", "relUrl": "/core/advanced/DISPLAY_YOUR_CURRENT_LOCATION/" },"26": { "doc": "Gestures", "title": "Gestures", "content": "By default the gestures are enabled for zoom in and zoom out. The OmhMap allows to enable or disable the gestures. ", "url": "/advanced-docs/core/advanced/GESTURES/", "relUrl": "/core/advanced/GESTURES/" },"27": { "doc": "Gestures", "title": "Enable zoom gestures", "content": "omhMap.setZoomGesturesEnabled(true) . ", "url": "/advanced-docs/core/advanced/GESTURES/#enable-zoom-gestures", "relUrl": "/core/advanced/GESTURES/#enable-zoom-gestures" },"28": { "doc": "Gestures", "title": "Disable zoom gestures", "content": "omhMap.setZoomGesturesEnabled(false) . ", "url": "/advanced-docs/core/advanced/GESTURES/#disable-zoom-gestures", "relUrl": "/core/advanced/GESTURES/#disable-zoom-gestures" },"29": { "doc": "OMH Location", "title": "OMH Location", "content": "The main entry point for location services integration. In order to use most location APIs, clients are required to hold either the Manifest.permission.ACCESS_COARSE_LOCATION permission or the Manifest.permission.ACCESS_FINE_LOCATION. There are several types of use cases for location. One of the most common is simply obtaining a single location in order to determine where the device is now, and continue from there. ", "url": "/advanced-docs/core/advanced/LOCATION/", "relUrl": "/core/advanced/LOCATION/" },"30": { "doc": "OMH Location", "title": "Get current location", "content": "The getCurrentLocation(OmhSuccessListener, OmhFailureListener) API is designed to get the device current location. It requires two listeners: OmhSuccessListener and OmhFailureListener. ", "url": "/advanced-docs/core/advanced/LOCATION/#get-current-location", "relUrl": "/core/advanced/LOCATION/#get-current-location" },"31": { "doc": "OMH Location", "title": "Success listener", "content": "Callback for when a ‘OmhCoordinate’ was obtained. The method onSuccess(OmhCoordinate) is executed after successfully obtained. val onSuccessListener = OmhSuccessListener { OmhCoordinate: OmhCoordinate -&gt; currentLocation = OmhCoordinate // Handle current location } . ", "url": "/advanced-docs/core/advanced/LOCATION/#success-listener", "relUrl": "/core/advanced/LOCATION/#success-listener" },"32": { "doc": "OMH Location", "title": "Failure listener", "content": "Callback interface for when a OmhCoordinate failed to obtain. The method onFailure(Exception) is executed after failling to obtain. val onFailureListener = OmhFailureListener { exception: Exception -&gt; Log.e(TAG, \"Error\", exception) // Handle the failure case } . ", "url": "/advanced-docs/core/advanced/LOCATION/#failure-listener", "relUrl": "/core/advanced/LOCATION/#failure-listener" },"33": { "doc": "OMH Location", "title": "Example of usage to get the current location with the success listener and failure listener", "content": "OmhLocation.getCurrentLocation( OmhOnSuccessListener = { OmhCoordinate -&gt; currentLocation = OmhCoordinate // Handle current location }, OmhOnFailureListener = { exception -&gt; Log.e(TAG, \"Error\", exception) // Handle the failure case } ) . ", "url": "/advanced-docs/core/advanced/LOCATION/#example-of-usage-to-get-the-current-location-with-the-success-listener-and-failure-listener", "relUrl": "/core/advanced/LOCATION/#example-of-usage-to-get-the-current-location-with-the-success-listener-and-failure-listener" },"34": { "doc": "OMH Location", "title": "Get last location", "content": "The getLastLocation(OmhSuccessListener, OmhFailureListener) API is designed to get the most recent historical location currently available. It will return null if no historical location is available. The historical location may be of an arbitrary age. OmhLocation.getLastLocation( OmhOnSuccessListener = { OmhCoordinate: OmhCoordinate -&gt; lastLocation = OmhCoordinate // Handle last location }, OmhOnFailureListener = { exception: Exception -&gt; Log.e(TAG, \"Error\", exception) // Handle the failure case } ) . ", "url": "/advanced-docs/core/advanced/LOCATION/#get-last-location", "relUrl": "/core/advanced/LOCATION/#get-last-location" },"35": { "doc": "Map Markers", "title": "Map Markers", "content": "The maps API allows you to add a marker on the map. ", "url": "/advanced-docs/core/advanced/MARKERS/", "relUrl": "/core/advanced/MARKERS/" },"36": { "doc": "Map Markers", "title": "Add a marker", "content": "You can add a marker to an specific position on the map. The marker’s icon is rendered on the map at the position. To add a marker call the function fun addMarker(OmhMarkerOptions): OmhMarker?. ", "url": "/advanced-docs/core/advanced/MARKERS/#add-a-marker", "relUrl": "/core/advanced/MARKERS/#add-a-marker" },"37": { "doc": "Map Markers", "title": "Marker options", "content": "Define marker options for a Marker. A position and title can be set. Example of usage of OmhMarkerOptions and addOmhMarker(OmhMarkerOptions): . val omhMarkerOptions = OmhMarkerOptions().apply { position = OmhCoordinate(-34.0, 151.0) title = \"Sydney\" } omhMap.addMarker(omhMarkerOptions) . ", "url": "/advanced-docs/core/advanced/MARKERS/#marker-options", "relUrl": "/core/advanced/MARKERS/#marker-options" },"38": { "doc": "My Location Layer", "title": "My Location Layer", "content": "Functions related to the current location of the device: Enable or disable the location layer, check if the layer is enabled or disabled, and set additional functionality when the icon is clicked to center location. ", "url": "/advanced-docs/core/advanced/MY_LOCATION_LAYER/", "relUrl": "/core/advanced/MY_LOCATION_LAYER/" },"39": { "doc": "My Location Layer", "title": "Set my location enabled", "content": "Enables or disables the my location layer. By default the layer is disabled. Important: To use this function is required Access Coarse Location or Access Fine Location permission. ", "url": "/advanced-docs/core/advanced/MY_LOCATION_LAYER/#set-my-location-enabled", "relUrl": "/core/advanced/MY_LOCATION_LAYER/#set-my-location-enabled" },"40": { "doc": "My Location Layer", "title": "Enable my location layer", "content": "To enable My Location Layer call the function and pass true fun setMyLocationEnabled(Boolean). It is necessary to have granted the Location Permission. Request Permissions . // Before checking the permissions, you have to ask the permissions. if (checkSelfPermission(requireContext(), ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED || checkSelfPermission(requireContext(), ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) { omhMap.setMyLocationEnabled(true) } . ", "url": "/advanced-docs/core/advanced/MY_LOCATION_LAYER/#enable-my-location-layer", "relUrl": "/core/advanced/MY_LOCATION_LAYER/#enable-my-location-layer" },"41": { "doc": "My Location Layer", "title": "Disable my location layer", "content": "To disable My Location Layer call the function and pass false fun setMyLocationEnabled(Boolean). omhMap.setMyLocationEnabled(false) . ", "url": "/advanced-docs/core/advanced/MY_LOCATION_LAYER/#disable-my-location-layer", "relUrl": "/core/advanced/MY_LOCATION_LAYER/#disable-my-location-layer" },"42": { "doc": "My Location Layer", "title": "Is my location layer enabled", "content": "To check if the My Location Layer is enabled call fun isMyLocationEnabled(): Boolean. if (omhMap.isMyLocationEnabled()) { // Is enabled } else { // Is not enabled } . ", "url": "/advanced-docs/core/advanced/MY_LOCATION_LAYER/#is-my-location-layer-enabled", "relUrl": "/core/advanced/MY_LOCATION_LAYER/#is-my-location-layer-enabled" },"43": { "doc": "My Location Layer", "title": "Set MyLocation button click listener", "content": "To set a click listener that’s invoked when the my location button is clicked. The listener is set in the method fun setMyLocationButtonClickListener(OmhOnMyLocationButtonClickListener). ", "url": "/advanced-docs/core/advanced/MY_LOCATION_LAYER/#set-mylocation-button-click-listener", "relUrl": "/core/advanced/MY_LOCATION_LAYER/#set-mylocation-button-click-listener" },"44": { "doc": "My Location Layer", "title": "My location button click listener", "content": "Callback when the My Location Dot(which signifies the user’s location) is clicked. This callback has the method fun onMyLocationButtonClick(): Boolean. val omhOnMyLocationButtonClickListener = OmhOnMyLocationButtonClickListener { // Example display a Toast that is centering the camera Toast.makeText(requireContext(), \"Center location\", Toast.LENGTH_SHORT).show() true } . Now the OmhOnMyLocationButtonListener can be set to fun setMyLocationButtonClickListener(OmhOnMyLocationButtonClickListener). omhMap.setMyLocationButtonClickListener(omhOnMyLocationButtonClickListener) . ", "url": "/advanced-docs/core/advanced/MY_LOCATION_LAYER/#my-location-button-click-listener", "relUrl": "/core/advanced/MY_LOCATION_LAYER/#my-location-button-click-listener" },"45": { "doc": "Polygons", "title": "Polygons", "content": "The maps API allows you to add a polygon on the map. ", "url": "/advanced-docs/core/advanced/POLYGONS/", "relUrl": "/core/advanced/POLYGONS/" },"46": { "doc": "Polygons", "title": "Add a polygon", "content": "A polygon is a shape with multiple edges on the map. You can customize the appearance of the polygon by changing its properties. To add a polygon call the function fun addPolygon(OmhPolygonOptions): OmhPolygon?. ", "url": "/advanced-docs/core/advanced/POLYGONS/#add-a-polygon", "relUrl": "/core/advanced/POLYGONS/#add-a-polygon" },"47": { "doc": "Polygons", "title": "Polygon options", "content": "Define polygon options for a Polygon. Many properties can be set. To get the full list of properties, see the OmhPolygonOptions class. Example of usage of OmhPolygonOptions and addPolygon(OmhPolygonOptions): . val omhPolygonOptions = OmhPolygonOptions().apply { outline = listOf( OmhCoordinate(-25.0, -15.0), OmhCoordinate(-25.0, 20.0), OmhCoordinate(5.0, -15.0), ) strokeColor = Color.RED fillColor = Color.BLUE strokeWidth = 10f } val polygon = omhMap.addPolygon(omhPolygonOptions) . ", "url": "/advanced-docs/core/advanced/POLYGONS/#polygon-options", "relUrl": "/core/advanced/POLYGONS/#polygon-options" },"48": { "doc": "Polygons", "title": "Modifying an existing Polygon", "content": "Once a Polygon is added to the map, you can modify its properties by calling the methods of the OmhPolygon class. To get the full list of methods, see the OmhPolygon class. Example of usage of OmhPolygon methods: . polygon.setFillColor(Color.BLUE) polygon.setWidth(20f) . ", "url": "/advanced-docs/core/advanced/POLYGONS/#modifying-an-existing-polygon", "relUrl": "/core/advanced/POLYGONS/#modifying-an-existing-polygon" },"49": { "doc": "Polygons", "title": "Polygon events", "content": "You can listen to click events on a Polygon by setting a listener on the map and calling the setOnPolygonClickListener method. The onPolygonClick method will be called with the OmhPolygon as an argument. val omhOnPolygonClickListener = OmhOnPolygonClickListener { polygon -&gt; val alert = AlertDialog.Builder(requireContext()) alert.setTitle(polygon.getTag().toString()) alert.setPositiveButton(\"OK\") { dialog, _ -&gt; dialog.dismiss() } alert.show() } omhMap.setOnPolygonClickListener(omhOnPolygonClickListener) . ", "url": "/advanced-docs/core/advanced/POLYGONS/#polygon-events", "relUrl": "/core/advanced/POLYGONS/#polygon-events" },"50": { "doc": "Polygons", "title": "Supported features", "content": "Not all the features across all the map providers are supported. Make sure to check compatibility matrix for the features you are interested in. The compatibility matrixes are available in the individual map plugin documentation. ", "url": "/advanced-docs/core/advanced/POLYGONS/#supported-features", "relUrl": "/core/advanced/POLYGONS/#supported-features" },"51": { "doc": "Polylines", "title": "Polylines", "content": "The maps API allows you to add a polyline on the map. ", "url": "/advanced-docs/core/advanced/POLYLINES/", "relUrl": "/core/advanced/POLYLINES/" },"52": { "doc": "Polylines", "title": "Add a polyline", "content": "A polyline is a series of connected line segments that can form any shape you want on a map. You can customize the appearance of the polyline by changing its properties. To add a polyline call the function fun addPolyline(OmhPolylineOptions): OmhPolyline?. ", "url": "/advanced-docs/core/advanced/POLYLINES/#add-a-polyline", "relUrl": "/core/advanced/POLYLINES/#add-a-polyline" },"53": { "doc": "Polylines", "title": "Polyline options", "content": "Define polyline options for a Polyline. Many properties can be set. To get the full list of properties, see the OmhPolylineOptions class. Example of usage of OmhPolylineOptions and addPolyline(OmhPolylineOptions): . val omhPolylineOptions = OmhPolylineOptions().apply { points = listOf( OmhCoordinate(0.0, 0.0), OmhCoordinate(30.0, 10.0), OmhCoordinate(20.0, 20.0), ) color = Color.RED width = 10f } val polyline = omhMap.addPolyline(omhPolylineOptions) . ", "url": "/advanced-docs/core/advanced/POLYLINES/#polyline-options", "relUrl": "/core/advanced/POLYLINES/#polyline-options" },"54": { "doc": "Polylines", "title": "Modifying an existing polyline", "content": "Once a polyline is added to the map, you can modify its properties by calling the methods of the OmhPolyline class. To get the full list of methods, see the OmhPolyline class. Example of usage of OmhPolyline methods: . polyline.setColor(Color.BLUE) polyline.setWidth(20f) . ", "url": "/advanced-docs/core/advanced/POLYLINES/#modifying-an-existing-polyline", "relUrl": "/core/advanced/POLYLINES/#modifying-an-existing-polyline" },"55": { "doc": "Polylines", "title": "Polyline events", "content": "You can listen to click events on a polyline by setting a listener on the map and calling the setOnPolylineClickListener method. The onPolylineClick method will be called with the OmhPolyline as an argument. val omhOnPolylineClickListener = OmhOnPolylineClickListener { polyline -&gt; val alert = AlertDialog.Builder(requireContext()) alert.setTitle(polyline.getTag().toString()) alert.setPositiveButton(\"OK\") { dialog, _ -&gt; dialog.dismiss() } alert.show() } omhMap.setOnPolylineClickListener(omhOnPolylineClickListener) . ", "url": "/advanced-docs/core/advanced/POLYLINES/#polyline-events", "relUrl": "/core/advanced/POLYLINES/#polyline-events" },"56": { "doc": "Polylines", "title": "Supported features", "content": "Not all the features across all the map providers are supported. Make sure to check compatibility matrix for the features you are interested in. The compatibility matrixes are available in the individual map plugin documentation. ", "url": "/advanced-docs/core/advanced/POLYLINES/#supported-features", "relUrl": "/core/advanced/POLYLINES/#supported-features" },"57": { "doc": "Advanced features", "title": "Omh Map SDK - Advanced Features", "content": "The Omh Map SDK Advanced Topics provide a deeper understanding of the SDK and its advanced features. These topics include working with map markers, utilizing the My Location layer, managing gestures, accessing device location services, and creating custom map implementations or plugins. By exploring these advanced topics, you can enhance your map integration and create powerful map experiences. The Omh Map SDK allows you to display maps using common components for both GMS and non-GMS devices, making it versatile across different device configurations. Whether your device includes GMS or not, you can leverage the Omh Map SDK to create interactive and customized map functionalities in your Android application. ", "url": "/advanced-docs/core/advanced/README/#omh-map-sdk---advanced-features", "relUrl": "/core/advanced/README/#omh-map-sdk---advanced-features" },"58": { "doc": "Advanced features", "title": "Advanced features", "content": " ", "url": "/advanced-docs/core/advanced/README/", "relUrl": "/core/advanced/README/" },"59": { "doc": "Utilities", "title": "Utilities", "content": "There is a utility or helper class to check the network connectivity. ", "url": "/advanced-docs/core/advanced/UTILITIES/", "relUrl": "/core/advanced/UTILITIES/" },"60": { "doc": "Utilities", "title": "Network connectivity checker", "content": "Helper class NetworkConnectivityChecker to check the network connectivity. val networkConnectivityChecker = NetworkConnectivityChecker(context) . ", "url": "/advanced-docs/core/advanced/UTILITIES/#network-connectivity-checker", "relUrl": "/core/advanced/UTILITIES/#network-connectivity-checker" },"61": { "doc": "Utilities", "title": "On lost Connection", "content": "Inner class OmhOnLostConnection to handle when the network disconnects or otherwise no longer satisfies this request or callback. The method to execute is fun onLost(Network). val omhOnLostConnection = NetworkConnectivityChecker.OmhOnLostConnection { Toast.makeText(requireContext(), \"Lost internet connection\", Toast.LENGTH_SHORT).show() } . ", "url": "/advanced-docs/core/advanced/UTILITIES/#on-lost-connection", "relUrl": "/core/advanced/UTILITIES/#on-lost-connection" },"62": { "doc": "Utilities", "title": "Start listening for connectivity changes", "content": "Register callbacks to receive notifications when different network states change. In this method a OmhOnLostConnection will be registered. val omhOnLostConnection = NetworkConnectivityChecker.OmhOnLostConnection { Toast.makeText(requireContext(), \"Lost internet connection\", Toast.LENGTH_SHORT).show() } networkConnectivityChecker.startListeningForConnectivityChanges(omhOnLostConnection) . ", "url": "/advanced-docs/core/advanced/UTILITIES/#start-listening-for-connectivity-changes", "relUrl": "/core/advanced/UTILITIES/#start-listening-for-connectivity-changes" },"63": { "doc": "Utilities", "title": "Stop listening for connectivity", "content": "Unregisters the all registered callbacks if possible. networkConnectivityChecker.stopListeningForConnectivity() . ", "url": "/advanced-docs/core/advanced/UTILITIES/#stop-listening-for-connectivity", "relUrl": "/core/advanced/UTILITIES/#stop-listening-for-connectivity" },"64": { "doc": "Utilities", "title": "Is network available", "content": "Checks if there is internet connection. val thereIsInternetConnection: Boolean = networkConnectivityChecker.isNetworkAvailable() . ", "url": "/advanced-docs/core/advanced/UTILITIES/#is-network-available", "relUrl": "/core/advanced/UTILITIES/#is-network-available" },"65": { "doc": "Plugins", "title": "Create a custom Map Implementation/Plugin", "content": "The Omh Maps SDK offers developers the flexibility to create custom map implementations or plugins for any map provider. With built-in support for popular providers like Google Maps and OpenStreetMap, developers can easily integrate maps into their applications. Additionally, the Omh Maps community is actively working to expand support for more providers such as MapBox, TomTom, Bing Maps, and others. By leveraging the comprehensive interfaces and utilities provided by Omh Maps, developers can seamlessly integrate their preferred mapping services and customize their mapping experiences to suit their specific needs. | in your app in the OmhConfig add the path of your library: | . OmhConfig { bundle(\"singleBuild\") { maps { gmsService { dependency = \"com.openmobilehub.android:plugin-googlemaps:1.0\" } nonGmsService { dependency = \"com.openmobilehub.android:plugin-openstreetmap:1.0\" path = \"your libraries path\" } } } } . | In your library you need to add the references like: implementation(\"com.openmobilehub.android.maps:core:1.0\") . | Basically is implement all the interfaces from the OmhMapApi. This means to implement the OmhMapFactory, OmhMap, OmhMapView, OmhMarker, OmhPolyline, OmhPolygon and OmhLocation interfaces. | . ", "url": "/advanced-docs/core/plugins/PLUGINS/#create-a-custom-map-implementationplugin", "relUrl": "/core/plugins/PLUGINS/#create-a-custom-map-implementationplugin" },"66": { "doc": "Plugins", "title": "How to implement?", "content": "Omh Map Factory . The interface OmhMapFactory a factory to provide any of the interfaces of the Omh Maps Api module. This isn’t designed to be used directly from the client side, instead use the OmhMapProvider. | The method getOmhMapView provides the OmhMapView that is the main entry point with the Omh Maps module. | The method getOmhMapView provides the OmhLocation that is the entry point for Locations. | . As example the Open Street Map module implements the OmhMapFactory as follows: . internal object OmhMapFactoryImpl : OmhMapFactory { override fun getOmhMapView(context: Context): OmhMapView = OmhMapViewImpl.Builder().build(context) override fun getOmhLocation(context: Context): OmhLocation = OmhLocationImpl.Builder().build(context) } . This means that the classes OmhMapViewImpl and OmhLocationImpl have implemented a Builder. internal class OmhMapViewImpl(context: Context) : OmhMapView { // ... internal class Builder : OmhMapView.Builder { override fun build(context: Context): OmhMapView { return OmhMapViewImpl(context) } } } . internal class OmhLocationImpl(context: Context) : OmhLocation { // ... internal class Builder : OmhLocation.Builder { override fun build(context: Context): OmhLocation { return OmhLocationImpl(context) } } } . For more information about the Omh Map functions,see Docs. ", "url": "/advanced-docs/core/plugins/PLUGINS/#how-to-implement", "relUrl": "/core/plugins/PLUGINS/#how-to-implement" },"67": { "doc": "Plugins", "title": "Plugins", "content": " ", "url": "/advanced-docs/core/plugins/PLUGINS/", "relUrl": "/core/plugins/PLUGINS/" },"68": { "doc": "Advanced features", "title": "Google Maps Plugin - Advanced Features", "content": "TBD . ", "url": "/advanced-docs/plugin-googlemaps/advanced/README/#google-maps-plugin---advanced-features", "relUrl": "/plugin-googlemaps/advanced/README/#google-maps-plugin---advanced-features" },"69": { "doc": "Advanced features", "title": "Advanced features", "content": " ", "url": "/advanced-docs/plugin-googlemaps/advanced/README/", "relUrl": "/plugin-googlemaps/advanced/README/" },"70": { "doc": "Advanced features", "title": "OpenStreetMap Plugin - Advanced Features", "content": "TBD . ", "url": "/advanced-docs/plugin-openstreetmap/advanced/README/#openstreetmap-plugin---advanced-features", "relUrl": "/plugin-openstreetmap/advanced/README/#openstreetmap-plugin---advanced-features" },"71": { "doc": "Advanced features", "title": "Advanced features", "content": " ", "url": "/advanced-docs/plugin-openstreetmap/advanced/README/", "relUrl": "/plugin-openstreetmap/advanced/README/" } } </main> </div> </div> <div class="search-overlay"></div> </div> </body> </html>
