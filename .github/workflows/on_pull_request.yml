name: Android CI

on:
  pull_request:
    branches: [master, main, develop, "release/**"]
    types: [opened, synchronize]

# GITHUB_TOKEN needs to be granted the permissions required to make a Pages deployment
permissions:
  contents: read
  pages: write # to deploy to Pages
  id-token: write # to verify the deployment originates from an appropriate source

jobs:
  # Build and publish only core package to MavenLocal
  maps-core:
    uses: ./.github/workflows/build_and_publish_to_maven_local.yml
    with:
      output-cache-prefix: mavenLocal-core
      gradle-command: "publishCoreToMavenLocal"
    secrets: inherit

  # Build and publish all plugins to MavenLocal
  maps-plugins:
    needs: maps-core
    uses: ./.github/workflows/build_and_publish_to_maven_local.yml
    with:
      input-cache-prefix: mavenLocal-core
      output-cache-prefix: mavenLocal-core-and-plugins
      gradle-command: "publishPluginsToMavenLocal"
    secrets: inherit

  # Assemble sample app
  assemble_modules:
    name: Assemble modules
    needs: maps-plugins
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false

      - name: Setup secrets
        run: bash ./.github/scripts/setup_secrets.sh "${{ secrets.MAPBOX_SECRET_TOKEN }}" "${{ secrets.GOOGLE_MAPS_API_KEY }}" "${{ secrets.MAPBOX_PUBLIC_TOKEN }}"

      - name: Set useMavenLocal flag
        run: echo useMavenLocal=true >> local.properties

      - name: Restore Cache MavenLocal
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: mavenLocal-core-and-plugins-${{ github.run_id }}

      - name: Assemble app debug APK
        run: bash ./gradlew assembleDebug

  code_quality_analysis:
    name: Check code quality
    needs: maps-plugins
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false

      - name: Setup secrets
        run: bash ./.github/scripts/setup_secrets.sh "${{ secrets.MAPBOX_SECRET_TOKEN }}" "${{ secrets.GOOGLE_MAPS_API_KEY }}" "${{ secrets.MAPBOX_PUBLIC_TOKEN }}"

      - name: Set useMavenLocal flag
        run: echo useMavenLocal=true >> local.properties

      - name: Restore Cache MavenLocal
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: mavenLocal-core-and-plugins-${{ github.run_id }}

      - name: Misspelling on detekt + ktlint
        run: bash ./gradlew detekt --stacktrace --continue

      - name: Run unit tests and check coverage
        run: bash ./gradlew jacocoCoverageVerification --stacktrace --continue

  build_documentation:
    # if: github.event.pull_request.merged == true
    needs: [assemble_modules, code_quality_analysis]
    name: Build documentation
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"
          bundler-cache: true
          working-directory: docs/markdown
          cache-version: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3

      - name: Setup secrets
        run: bash ./.github/scripts/setup_secrets.sh "${{ secrets.MAPBOX_SECRET_TOKEN }}" "${{ secrets.GOOGLE_MAPS_API_KEY }}" "${{ secrets.MAPBOX_PUBLIC_TOKEN }}"

      - name: Set useMavenLocal flag
        run: echo useMavenLocal=true >> local.properties

      - name: Restore Cache MavenLocal
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: mavenLocal-core-and-plugins-${{ github.run_id }}

      - name: Build documentation with Gradle task
        run: ./gradlew buildDocs

      - name: Cache MavenLocal
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ inputs.output-cache-prefix }}-${{ github.run_id }}

      - name: Prepare artifacts output directory
        run: mkdir built_docs

      - name: Copy built HTML API documentation to destination directory
        run: cp -r docs/generated built_docs/api-docs

      - name: Install gems for Jekyll
        run: bundle install
        working-directory: docs/markdown

      - name: Build with Jekyll
        run: bundle exec jekyll build
        working-directory: docs/markdown
        env:
          JEKYLL_ENV: production

      - name: Copy built HTML markdown documentation to destination directory
        run: cp -r docs/markdown/_site built_docs/advanced-docs

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: built_docs

  deploy:
    name: Deploy documentation to GitHub Pages
    needs: build_documentation
    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
